Notes on the Alchemy VM Architecture

Authored by Ed McManus and Zazzo9


Alchemy is awesome! Hidden away in the source are a few undocumented gems, like almost-complete SDL support and a pretty awesome GDB client, which allows you to keep from breaking out of your standard C toolchain.

Additionally, the C Virtual Machine (the Machine class in the AS source) is really clean. Very nice.




Some notes on the VM architecture:


GSTATE

gstate is an instance of MState

gstate.funcs contains a vector or array of exported Actionscript function objects. These are built by calls to regFunc. The unique numeric identifier of an exported Actionscript function is its index in gstate.funcs.

gstate.syms contains a lookup of symbol names to their memory offsets. This lookup is built by calls to exportSym.


HOW C FUNCTIONS ARE BUILT

AS3 functions are mapped to C by defining a const using a naming convention, such that AS3_Release, which returns an int, defines the constant i_AS3_Release like so:

i_AS3_Release:int = exportSym("_AS3_Release", new CProcTypemap(CTypemap.VoidType, [CTypemap.PtrType])).createC(CTypeMap.AS3ValType.valueTracker.release)[0]);

CProcTypemap is created by specifying, as parameters, the return type and an array of all argument types. createC, which is called on the resulting CProcTypemap process, returns a new unique numeric identifier for the resulting function after it's registered.

C functions map directly to Machine sub-classes and all use the prefix FSM (Finite State Machine). (Alchemy operates as a group of concurrent finite state machines to simulate threading.) Before every class definition, Alchemy defines the original method name (without the FSM prefix) to be a constant int containing a unique numeric identifier associated with the function that will start the finite state machine.




[CLASS] CRunner
==========================

Responsible for incrementing machine states, and yielding to the parent application if the current "thread" has
been executing for more than 10 seconds. (Alchemy checks this condition every 1,000 work iterations, so it's still 
possible to hit the 15 second flash timeout if your C application uses any long-running methods.)

It also means you should avoid calling long-running asynchronous C methods on EnterFrame, as you could be queuing method 
calls faster than CRunner can pop them!


Key Methods
--------------------------
work	// Executes queued worker methods until timing out or completing




[CLASS] CLibInit
==========================

The main C interface. Contains the supplyFile, setEnv, and init methods which you call from you AS3 application.


Key Methods
--------------------------
init	// Instantiates the CRunner and begins execution




[INSTANCE] mstate/gstate => extends MemUser
==========================

Encapsulates the C Virtual Machine state.


Key Properties
--------------------------
You may recognize these as x86 ASM instructions.
You can reference Wikipedia's entry on x86 instructions: http://en.wikipedia.org/wiki/X86

sp		Stack Pointer
ds		Data segment - Points to the active code segment
esp		Extended Stack Pointer - Address of the bottom of stack memory. Pushing new values onto the stack requires
			decrementing the Extended Stack Pointer and writing the value to the bottom of the stack.
ebp		Extended Base Pointer - The address in the stack where the current function frame begins.  Local variables 
			and arguments are worked with relative to the base pointer.
eax		Extended Accumulator Register - This is mainly used for storing function return values.
edx		Extended Data Register
st(*)	Stack Registers - (Ex: st0, st1, st2 ...)
cf		Carry Flag - Set when an operation causes an overflow (like add)




[INSTANCE] gstaticInitter (Instance of Static Initter)
==========================

Responsible for writing static and global values to memory. This is not optimized at all, and can cause large 
slowdowns if a program has a lot of static data.


Key Methods
--------------------------
Getters/Setters of various types




[CLASS] CProcTypemap
==========================

Provides type mapping for C-AS3 marshaling


Key Methods
--------------------------
createC		// Registers the AS3 function in C memory, defines a lambda which is the AS3 representation of the
			// C function, and returns its unique identifier.
fromC		// "Unboxes" C values for AS3 consumption






C Function Organization
==========================

Most C functions follow a similar pattern.

Set up the Finate State Machine (FSM):
First we define the various states of the C VM. That's the __asm( push(state), switchjump( ... All the FSM states ... ) ).
This is just an assembly representation of a gigantic switch statement.

Define the various FSM states:
We define an asm label with, for example, __asm(lbl("__Z10Flash_tickPvP8_AS3_Val_state0")). This represents the 
"case" targets one would see in an AS3 switch.


Other

RegFunc consists of:
mstate.funcs.push()

This pushes a function object onto the gstate.funcs array, and ensures that each AS3 function has a unique associated identifier -- its index in the array.

We can wrap these functions to allow direct (non-sampling) profiling, although it significantly impacts application performance.












==============================================================================
A REALLY SIMPLE ALCHEMY PROGRAM -- STRING ECHO
==============================================================================

The generated source (the important part, from line 27,126) for stringecho.c looks like this:



/*
 * C SOURCE
 */

static AS3_Val echo(void* self, AS3_Val args)
{
	// Initialize string to null
	char* val = NULL;
	
	// Parse the arguments. Expect 1.
	// Pass in val to hold the first argument, which should be a string
	AS3_ArrayValue( args, "StrType", &val );
	
	// If no argument is specified
	if(val == NULL)
	{
		char* nullString = "null";
		//return the string "null"
		return AS3_String(nullString);
	}
	
	// Otherwise, return the string that was passed in
	return AS3_String(val);
}



/*
 * GENERATED AS3
 */

// Async
public const _echo:int = regFunc(FSM_echo.start)

public final class FSM_echo extends Machine {

	public static function start():void {
			var result:FSM_echo = new FSM_echo
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_echo_entry"))
		__asm(push(state), switchjump(
			"_echo_errState",
			"_echo_state0",
			"_echo_state1",
			"_echo_state2"))
	__asm(lbl("_echo_state0"))
	__asm(lbl("_echo__XprivateX__BB75_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 12
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  (__2E_str99)
		i2 =  ((mstate.ebp+-4))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("_echo_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("_echo__XprivateX__BB75_2_F"))
	__asm(lbl("_echo__XprivateX__BB75_1_F"))
		i0 =  (__2E_str1100)
	__asm(lbl("_echo__XprivateX__BB75_2_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_String])()
		return
	__asm(lbl("_echo_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_echo_errState"))
		throw("Invalid state in _echo")
	}
}




i0, i1, i2 are all registers to hold local working values, including function parameters, as we see in the following code:

C:
	AS3_ArrayValue( args, "StrType", &val );


Unwraps to this AS3:

	// Push arguments onto stack
	
	mstate.esp -= 12                                            // Make room on stack - 12 bytes (3, 4-byte, values)
	i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))      // Args from the C echo function
	i1 =  (__2E_str99)                                          // Constant string
	i2 =  ((mstate.ebp+-4))                                     // Pointer to &val
	__asm(push(i0), push(mstate.esp), op(0x3c))                 // set
	__asm(push(i1), push((mstate.esp+4)), op(0x3c))             // set
	__asm(push(i2), push((mstate.esp+8)), op(0x3c))             // set
	
	// Arguments have been pushed
	
	state = 1                                                   // Move to next state
	mstate.esp -= 4;                                            // Push return address (unused)
	(mstate.funcs[_AS3_ArrayValue])()                           // Call _AS3_ArrayValue
	
	
	
